<?php

namespace App\Tests\Unit;

use App\Entity\Equipment;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Uid\Uuid;

class EquipmentTest extends TestCase
{
    public function testGettersAndSetters(): void
    {
        $equipment = new Equipment();
        $uuid = Uuid::v4();
        $createdAt = new \DateTimeImmutable();
        $updatedAt = new \DateTimeImmutable('+1 hour');

        // Set values
        $equipment->setName('Test Equipment');
        $equipment->setCategory('Test Category');
        $equipment->setNumber('SN12345');
        $equipment->setDescription('Test Description');
        $equipment->setCreatedAt($createdAt);
        $equipment->setUpdatedAt($updatedAt);

        // Assert values
        $this->assertNull($equipment->getId()); // ID is generated by Doctrine, not set directly
        $this->assertSame('Test Equipment', $equipment->getName());
        $this->assertSame('Test Category', $equipment->getCategory());
        $this->assertSame('SN12345', $equipment->getNumber());
        $this->assertSame('Test Description', $equipment->getDescription());
        $this->assertSame($createdAt, $equipment->getCreatedAt());
        $this->assertSame($updatedAt, $equipment->getUpdatedAt());
        $this->assertNull($equipment->getDeletedAt());
        $this->assertFalse($equipment->isDeleted());
    }

    public function testDefaultDescriptionIsEmptyString(): void
    {
        $equipment = new Equipment();
        $this->assertSame('', $equipment->getDescription());

        $equipment->setDescription(null);
        $this->assertSame('', $equipment->getDescription());
    }

    public function testSoftDeleteAndRestore(): void
    {
        $equipment = new Equipment();

        // Initially not deleted
        $this->assertFalse($equipment->isDeleted());
        $this->assertNull($equipment->getDeletedAt());

        // Soft delete
        $equipment->softDelete();
        $this->assertTrue($equipment->isDeleted());
        $this->assertInstanceOf(\DateTimeImmutable::class, $equipment->getDeletedAt());
        $this->assertLessThanOrEqual(new \DateTimeImmutable(), $equipment->getDeletedAt());

        // Restore
        $equipment->restore();
        $this->assertFalse($equipment->isDeleted());
        $this->assertNull($equipment->getDeletedAt());
    }

    public function testSetUpdatedAtValue(): void
    {
        $equipment = new Equipment();
        // Simulate pre-update lifecycle callback
        $equipment->setUpdatedAtValue();
        $this->assertInstanceOf(\DateTimeImmutable::class, $equipment->getUpdatedAt());
        $this->assertLessThanOrEqual(new \DateTimeImmutable(), $equipment->getUpdatedAt());
    }
}