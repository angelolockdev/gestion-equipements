<?php

namespace App\Tests\Unit;

use App\Entity\Employee;
use App\Entity\Equipment;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Uid\Uuid;

class EmployeeTest extends TestCase
{
    public function testGettersAndSetters(): void
    {
        $employee = new Employee();
        $hiredAt = new \DateTimeImmutable('2023-01-15');

        // Set values
        $employee->setFirstName('John');
        $employee->setLastName('Doe');
        $employee->setEmail('john.doe@example.com');
        $employee->setHiredAt($hiredAt);

        // Assert values
        $this->assertNull($employee->getId()); // ID is generated by Doctrine, not set directly
        $this->assertSame('John', $employee->getFirstName());
        $this->assertSame('Doe', $employee->getLastName());
        $this->assertSame('john.doe@example.com', $employee->getEmail());
        $this->assertSame($hiredAt, $employee->getHiredAt());
        $this->assertEmpty($employee->getEquipment());
    }

    public function testAddAndRemoveEquipment(): void
    {
        $employee = new Employee();
        $equipment1 = new Equipment();
        $equipment1->setNumber('SN001');

        $equipment2 = new Equipment();
        $equipment2->setNumber('SN002');

        // Add equipment
        $employee->addEquipment($equipment1);
        $this->assertCount(1, $employee->getEquipment());
        $this->assertTrue($employee->getEquipment()->contains($equipment1));
        $this->assertSame($employee, $equipment1->getEmployee());

        $employee->addEquipment($equipment2);
        $this->assertCount(2, $employee->getEquipment());
        $this->assertTrue($employee->getEquipment()->contains($equipment2));
        $this->assertSame($employee, $equipment2->getEmployee());

        // Try to add same equipment again
        $employee->addEquipment($equipment1);
        $this->assertCount(2, $employee->getEquipment());

        // Remove equipment
        $employee->removeEquipment($equipment1);
        $this->assertCount(1, $employee->getEquipment());
        $this->assertFalse($employee->getEquipment()->contains($equipment1));
        $this->assertNull($equipment1->getEmployee());

        $employee->removeEquipment($equipment2);
        $this->assertCount(0, $employee->getEquipment());
        $this->assertFalse($employee->getEquipment()->contains($equipment2));
        $this->assertNull($equipment2->getEmployee());
    }
}